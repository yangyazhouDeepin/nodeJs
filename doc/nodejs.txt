1、 每次保存后，node自动重启插件  supervisor
使用：
  supervisor main.js
node的特点是异步式I/O与事件紧密结合的编程模式。

2、文件读取
  i、异步读取：      var fs = require('fs');   fs.readFile('nodejs.txt', 'UTF-8', function(err, data))
  ii、同步读取： var fs = require('fs'); var data = fs.readFileSync('nodejs.txt', 'UTF-8');

2.1、文件写入
  i、异步写入：   fs.writeFile('nodejs.txt', '.........', 'utf-8', function(err){   });
  ii、同步写入：  fs.writeFileSync('nodejs.txt', '......', 'utf-8');

3、路径获取
var path = require('path');

__dirname :   表示当前路径
__filename:   当前文件的路径及名称 （nodejs/lib/readFile.js）
path.resolve('./'):  表示当前项目的根目录
process.cwd():  当前进程根目录

4、commonJs包规范
  package.json必须在顶层目录
  二进制文件应该在bin目录下
  javascript代码应该在lib目录下
  文档在doc目录下
  单元测试应该在test目录下

5、event 事件
  var EventEmitter = require('events').EventEmitter;
  var event = new EventEmitter();

  event.on('some_event', function(){.....});
  event.emit('some_event');

6、 添加文件
  //异步添加
  fs.appendFile(path, data, 'utf-8', function(err){})
  //同步添加
  try{
    fs.appendFileSync(path, data, 'utf-8');
  }catch(err){
    console.log(err);
  }

7、stream  流
  var rs = fs.createReadStream(filepath, 'utf-8');
  var ws = fs.createWriteStream(filepath, 'utf-8');
  rs.on('data', function(chunk){
    ws.write(chunk);
  })
  rs.on('end', function(){
    ws.end();
  })
  rs.on('error', function(err){
    console.log(err);
    ws.end();
  })

8、pipe  管道
  readable流有pipe方法
  var rs = fs.createReadStream(filepath, 'utf-8');
  var ws = fs.createWriteStream(filepath, 'utf-8');
  rs.pipe(ws);

9、http   服务
  var http = require('http');
  var url = require('url');
  var config = require('../../config.js');
  var path = require('path');
  var server = http.createServer(function(request, response){
    var pathname = url.parse(request.url).pathname;
    var file_path = path.join(config.root , pathname);
    fs.stat(file_path, function(err, stats){
      if(!err && stats.isFile()){
        response.writeHead(200);
        fs.createReadStream(file_path).pipe(response);
      }else{
        response.writeHead(404);
        response.end('404!');
      }
    })
  })

  server.listen(8080);

  
